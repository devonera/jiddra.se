; // jshint ignore:line
(function (root, factory, undefined) {
  'use strict';
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    // root is window
    root.CookiesEuBanner = factory();
  }
}(window, function () {
  'use strict';

  var CookiesEuBanner,
    document = window.document;

  CookiesEuBanner = function (launchFunction, waitAccept, undefined) {
    if (!(this instanceof CookiesEuBanner)) {
      return new CookiesEuBanner(launchFunction);
    }

    this.cookieTimeout = 33696000000; // 13 months in milliseconds
    this.bots = /bot|googlebot|crawler|spider|robot|crawling/i;
    this.cookieName = 'hasConsent';
    this.trackingCookiesNames = [ '__utma', '__utmb', '__utmc', '__utmt', '__utmv', '__utmz', '_ga', '_gat', '_gid' ];
    this.launchFunction = launchFunction;
    this.waitAccept = waitAccept || false;
    this.init();
  };

  CookiesEuBanner.prototype = {
    init: function () {
      // Do nothing if it is a bot
      // If DoNotTrack is activated, do nothing too
      if (this.isBot() || !this.isToTrack() || this.hasConsent() === false) {
        return false;
      }

      // User has already consent to use cookies to tracking
      if (this.hasConsent() === true) {
        // Launch user custom function
        this.launchFunction();
        return true;
      }

      // If it's not a bot, no DoNotTrack and not already accept : show banner
      this.showBanner();

      if (!this.waitAccept) {
        // Accept cookies by default for the next page
        this.setCookie(this.cookieName, true);
      }
    },

    /*
     * Show banner at the top of the page
     */
    showBanner: function () {
      var _this = this,
        banner = document.getElementById('cookies-eu-banner'),
        rejectButton = document.getElementById('cookies-eu-reject'),
        acceptButton = document.getElementById('cookies-eu-accept'),
        moreLink = document.getElementById('cookies-eu-more'),
        waitRemove = (banner.dataset.waitRemove === undefined) ? 0 : parseInt(banner.dataset.waitRemove); 

      banner.style.display = 'block';

      if (moreLink) {
        this.addEventListener(moreLink, 'click', function () {
          _this.deleteCookie(_this.cookieName);
        });
      }

      if (acceptButton) {
        this.addEventListener(acceptButton, 'click', function () {
          _this.removeBanner(banner, waitRemove);
          _this.setCookie(_this.cookieName, true);
          _this.launchFunction();
        });
      }

      if (rejectButton) {
        this.addEventListener(rejectButton, 'click', function () {
          _this.removeBanner(banner, waitRemove);
          _this.setCookie(_this.cookieName, false);
          _this.deleteTrackingCookies();
        });
      }
    },

    /*
     * Check if user already consent
     */
    hasConsent: function () {
      if (document.cookie.indexOf(this.cookieName + '=true') > -1) {
        return true;
      } else if (document.cookie.indexOf(this.cookieName + '=false') > -1) {
        return false;
      }

      return null;
    },

    /*
     * Detect if the visitor is a bot or not
     * Prevent for search engine take the cookie
     * alert message as main content of the page
     */
    isBot: function () {
      return this.bots.test(navigator.userAgent);
    },

    /*
     * Check if DoNotTrack is activated
     */
    isToTrack: function () {
      var dnt = navigator.doNotTrack || navigator.msDoNotTrack || window.doNotTrack;
      return (dnt !== null && dnt !== undefined) ? (dnt && dnt !== 'yes' && dnt !== 1 && dnt !== '1') : true;
    },

    /*
     * Delete existent tracking cookies
     */
    deleteTrackingCookies: function () {
      var _this = this;
      this.trackingCookiesNames.map(function (cookieName) {
        _this.deleteCookie(cookieName);
      });
    },

    /*
     * Create/update cookie
     */
    setCookie: function (name, value) {
      var date = new Date();
      date.setTime(date.getTime() + this.cookieTimeout);

      document.cookie = name + '=' + value + ';expires=' + date.toGMTString() + ';path=/';
    },

    /*
     * Delete cookie by changing expire
     */
    deleteCookie: function (name) {
      var hostname = document.location.hostname;
      if (hostname.indexOf('www.') === 0) {
        hostname = hostname.substring(4);
      }
      document.cookie = name + '=; domain=.' + hostname + '; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/';
      document.cookie = name + '=; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/';
    },

    addEventListener: function (DOMElement, evnt, callback) {
      if (document.addEventListener) { // For all major browsers, except IE 8 and earlier
        DOMElement.addEventListener(evnt, callback);
      } else if (DOMElement.attachEvent) { // For IE 8 and earlier versions
        DOMElement.attachEvent('on' + evnt, callback);
      }
    },

    /*
     * Delays removal of banner allowing developers
     * to specify their own transition effects
     */
    removeBanner: function (banner, wait) {
      setTimeout (function() {
        banner.parentNode.removeChild(banner);
      }, wait);
    }
  };

  return CookiesEuBanner;
}));
var affiliateBeautifier = (function () {
	var fn = {};
	var href = '';
	var data_href = '';
	var elements = '';

	fn.init = function(data) {
		fn.elements = document.querySelectorAll(data.selector);
		fn.event();
		fn.switch(data);
	};

	// Switch urls
	fn.switch = function() {
		[].forEach.call(fn.elements, function(e) {
			fn.get(e);
			fn.set(e);
		});
	};

	// Event
	fn.event = function() {
		['mousedown', 'touchstart'].forEach(function(event) {
			fn.elements.forEach(function(element) {
				element.addEventListener(event, function(e) {
					element.setAttribute('href', element.getAttribute('data-href') );
				});

			});
		});
	};

	// Get
	fn.get = function(e) {
		fn.getHref(e);
		fn.getDataHref(e);
	};

	// Set
	fn.set = function(e) {
		fn.setHref(e);
		fn.setDataHref(e);
	}

	// Get href
	fn.getHref = function(e) {
		fn.href = e.getAttribute('href');
	};

	// Get data href
	fn.getDataHref = function(e) {
		var data_href = e.getAttribute('data-href');
		fn.data_href = ( Boolean( data_href ) ) ? data_href : fn.href;
	};

	// Set href
	fn.setHref = function(e) {
		e.setAttribute('href', fn.data_href);

	};

	// Set data href
	fn.setDataHref = function(e) {
		e.setAttribute('data-href', fn.href);
	};

	return fn;
})();
var tabbis = (function () {
	var fn = {};

	var data;
	var types = ['tab', 'pane'];
	var type;
	var groups = [];
	var activeGroups = [];
	var activeChildren = [];
	var activeItems = [];
	var indexGroup;
	var indexItem;
	var memory = [];

	fn.init = function(options) {
		data = options;
		fn.setDefaults();
		fn.setMemory();

		groups['tab'] = document.querySelectorAll(data.tabGroup);
		groups['pane'] = document.querySelectorAll(data.paneGroup);

		for( var groupIndex = 0; groupIndex < groups['tab'].length; groupIndex++ ) {
			var tabItems = groups['tab'][groupIndex].children;

			for( var itemIndex = 0; itemIndex < tabItems.length; itemIndex++ ) {
				tabItems[itemIndex].addEventListener('click', fn.onClick.bind(this, groupIndex, itemIndex), false);

				indexGroup = groupIndex;
				indexItem = itemIndex;

				if(!fn.hasMemory()) continue;
				fn.setNodes(groupIndex, itemIndex);
			}
		}
	};

	fn.onClick = function(groupIndex, itemIndex) {
		fn.setNodes(groupIndex, itemIndex);

		fn.setCallback(indexGroup, indexItem);
	};

	fn.setNodes = function(groupIndex, itemIndex) {
		indexGroup = groupIndex;
		indexItem = itemIndex;

		for( var i = 0; i < types.length; i++ ) {
			type = types[i];

			fn.setActiveGroup();
			fn.setActiveChildren();
			fn.setActiveItems();
			fn.putActiveClass();
		}

		memory[groupIndex] = [];
		memory[groupIndex][itemIndex] = true;

		localStorage.setItem('tabbis', JSON.stringify(memory));
	};

	fn.hasMemory = function() {
		if( typeof memory === 'undefined' ) return;
		if( typeof memory[indexGroup] === 'undefined' ) return;
		if( typeof memory[indexGroup][indexItem] === 'undefined') return;
		if( memory[indexGroup][indexItem] !== true ) return;
		return true;
	};

	fn.setMemory = function() {
		if(localStorage.getItem('tabbis') === null) return;
		if(localStorage.getItem('tabbis').length == 0) return;

		memory = Object.values(JSON.parse(localStorage.getItem('tabbis')));
	};

	fn.putActiveClass = function() {
		for( var i = 0; i < activeChildren[type].length; i++ ) {
			activeChildren[type][i].classList.remove(data[type + 'Active']);
		}

		activeItems[type].classList.add(data[type + 'Active']);
	};

	fn.setDefaults = function() {
		for( var i = 0; i < types.length; i++ ) {
			type = types[i];

			fn.setOption(type + 'Group', '[data-' + type + 's]');
			fn.setOption(type + 'Active', 'active');
		}
	};

	fn.setOption = function(key, value) {
		data = data || [];
		data[key] = data[key] || value;
	};

	fn.setActiveGroup = function() {
		activeGroups[type] = groups[type][indexGroup];
	};

	fn.setActiveChildren = function() {
		activeChildren[type] = activeGroups[type].children;
	};

	fn.setActiveItems = function() {
		activeItems[type] = activeChildren[type][indexItem];
	};

	fn.setCallback = function() {
		if (typeof data.callback === "function") {
			data.callback(activeItems.tab, activeItems.pane);
		}
	};

	fn.reset = function() {
		for( var groupIndex = 0; groupIndex < groups['tab'].length; groupIndex++ ) {
			tabItems = groups['tab'][groupIndex].children;
			paneItems = groups['pane'][groupIndex].children;

			for( var itemIndex = 0; itemIndex < tabItems.length; itemIndex++ ) {
				tabItems[itemIndex].classList.remove(data['tabActive']);
				paneItems[itemIndex].classList.remove(data['paneActive']);
			}
		}
		localStorage.removeItem('tabbis');
	};
	
	return fn;
})();
/**
* @fileOverview
* @author Zoltan Toth
* @version 2.1.1
*/

/**
* @description
* Vanilla JavaScript dropdown - a tiny (~600 bytes gzipped) select tag replacement.
*
* @class
* @param {(string|Object)} options.elem - HTML id of the select or the DOM element.
*/
var CustomSelect = function(options) {
  var elem          = typeof options.elem === 'string' ?
                        document.getElementById(options.elem) : options.elem,
      mainClass     = 'js-Dropdown',
      titleClass    = 'js-Dropdown-title',
      listClass     = 'js-Dropdown-list',
      selectedClass = 'is-selected',
      openClass     = 'is-open',
      selectOptions = elem.querySelectorAll('option'),
      optionsLength = selectOptions.length;

  // creating the pseudo-select container
  var selectContainer = document.createElement('div');

  selectContainer.className = mainClass;

  if (elem.id) {
    selectContainer.id = 'custom-' + elem.id;
  }

  // creating the always visible main button
  var button = document.createElement('button');

  button.className = titleClass;
  button.textContent = selectOptions[0].textContent;

  // creating the UL
  var ul = document.createElement('ul');
  ul.className = listClass;

  for (var i = 0; i < optionsLength; i++) {
      var li = document.createElement('li');

      li.innerText = selectOptions[i].textContent;
      li.setAttribute('data-value', selectOptions[i].value);
      li.setAttribute('data-index', i);

      if (selectOptions[i].getAttribute('selected') !== null) {
          li.classList.add(selectedClass);
          button.textContent = selectOptions[i].textContent;
      }

      ul.appendChild(li);
  }

  // appending the button and the list
  selectContainer.appendChild(button);
  selectContainer.appendChild(ul);

  selectContainer.addEventListener('click', onClick);

  // pseudo-select is ready - append it and hide the original
  elem.parentNode.insertBefore(selectContainer, elem);
  elem.style.display = 'none';


  /**
  * Closes the current select on any click outside of it.
  *
  */
  document.addEventListener('click', function(e) {
      if (!selectContainer.contains(e.target)) close();
  });

  /**
  * Handles the clicks on current select.
  *
  * @param {object} e - The item the click occured on.
  */
  function onClick(e) {
      e.preventDefault();

      var t = e.target; // || e.srcElement; - uncomment for IE8

      if (t.className === titleClass) {
          toggle();
      }

      if (t.tagName === 'LI') {
          selectContainer.querySelector('.' + titleClass).innerText = t.innerText;
          elem.options.selectedIndex = t.getAttribute('data-index');

          //trigger 'change' event
          var evt = new CustomEvent('change');
          elem.dispatchEvent(evt);

          // highlight the selected
          for (var i = 0; i < optionsLength; i++) {
              ul.querySelectorAll('li')[i].classList.remove(selectedClass);
          }
          t.classList.add(selectedClass);

          close();
      }
  }

  /**
  * Toggles the open/close state of the select on title's clicks.
  *
  * @public
  */
  function toggle() {
      ul.classList.toggle(openClass);
  }

  /**
  * Opens the select.
  *
  * @public
  */
  function open() {
      ul.classList.add(openClass);
  }

  /**
  * Closes the select.
  *
  * @public
  */
  function close() {
      ul.classList.remove(openClass);
  }

  return {
      toggle: toggle,
      close:  close,
      open:   open
  };
};